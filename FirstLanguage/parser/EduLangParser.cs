//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/Lukas/Projects/FirstLanguage/FirstLanguage/grammar/EduLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class EduLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KW_PUSH=1, KW_POP=2, KW_LOAD=3, KW_STORE=4, KW_ADD=5, KW_SUB=6, KW_LABEL=7, 
		KW_JUMPZ=8, KW_PRINT=9, KW_HALT=10, INTEGER_LITERAL=11, IDENTIFIER=12, 
		COMMENT=13, WS=14, NEWLINE=15;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_instruction = 2, RULE_push_instr = 3, 
		RULE_pop_instr = 4, RULE_load_instr = 5, RULE_store_instr = 6, RULE_add_instr = 7, 
		RULE_sub_instr = 8, RULE_label_instr = 9, RULE_jumpz_instr = 10, RULE_print_instr = 11, 
		RULE_halt_instr = 12;
	public static readonly string[] ruleNames = {
		"program", "statement", "instruction", "push_instr", "pop_instr", "load_instr", 
		"store_instr", "add_instr", "sub_instr", "label_instr", "jumpz_instr", 
		"print_instr", "halt_instr"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "KW_PUSH", "KW_POP", "KW_LOAD", "KW_STORE", "KW_ADD", "KW_SUB", 
		"KW_LABEL", "KW_JUMPZ", "KW_PRINT", "KW_HALT", "INTEGER_LITERAL", "IDENTIFIER", 
		"COMMENT", "WS", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EduLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EduLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EduLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EduLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(EduLangParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(EduLangParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(EduLangParser.NEWLINE, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34814L) != 0)) {
				{
				State = 28;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_PUSH:
				case KW_POP:
				case KW_LOAD:
				case KW_STORE:
				case KW_ADD:
				case KW_SUB:
				case KW_LABEL:
				case KW_JUMPZ:
				case KW_PRINT:
				case KW_HALT:
					{
					State = 26;
					statement();
					}
					break;
				case NEWLINE:
					{
					State = 27;
					Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 33;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(EduLangParser.NEWLINE, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			instruction();
			State = 36;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Load_instrContext load_instr() {
			return GetRuleContext<Load_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pop_instrContext pop_instr() {
			return GetRuleContext<Pop_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Push_instrContext push_instr() {
			return GetRuleContext<Push_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Store_instrContext store_instr() {
			return GetRuleContext<Store_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_instrContext add_instr() {
			return GetRuleContext<Add_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_instrContext sub_instr() {
			return GetRuleContext<Sub_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jumpz_instrContext jumpz_instr() {
			return GetRuleContext<Jumpz_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Print_instrContext print_instr() {
			return GetRuleContext<Print_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Halt_instrContext halt_instr() {
			return GetRuleContext<Halt_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_instrContext label_instr() {
			return GetRuleContext<Label_instrContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 4, RULE_instruction);
		try {
			State = 48;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_LOAD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				load_instr();
				}
				break;
			case KW_POP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39;
				pop_instr();
				}
				break;
			case KW_PUSH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40;
				push_instr();
				}
				break;
			case KW_STORE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 41;
				store_instr();
				}
				break;
			case KW_ADD:
				EnterOuterAlt(_localctx, 5);
				{
				State = 42;
				add_instr();
				}
				break;
			case KW_SUB:
				EnterOuterAlt(_localctx, 6);
				{
				State = 43;
				sub_instr();
				}
				break;
			case KW_JUMPZ:
				EnterOuterAlt(_localctx, 7);
				{
				State = 44;
				jumpz_instr();
				}
				break;
			case KW_PRINT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 45;
				print_instr();
				}
				break;
			case KW_HALT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 46;
				halt_instr();
				}
				break;
			case KW_LABEL:
				EnterOuterAlt(_localctx, 10);
				{
				State = 47;
				label_instr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Push_instrContext : ParserRuleContext {
		public IToken val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PUSH() { return GetToken(EduLangParser.KW_PUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(EduLangParser.INTEGER_LITERAL, 0); }
		public Push_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_push_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterPush_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitPush_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPush_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Push_instrContext push_instr() {
		Push_instrContext _localctx = new Push_instrContext(Context, State);
		EnterRule(_localctx, 6, RULE_push_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(KW_PUSH);
			State = 51;
			_localctx.val = Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pop_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_POP() { return GetToken(EduLangParser.KW_POP, 0); }
		public Pop_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pop_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterPop_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitPop_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPop_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pop_instrContext pop_instr() {
		Pop_instrContext _localctx = new Pop_instrContext(Context, State);
		EnterRule(_localctx, 8, RULE_pop_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(KW_POP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Load_instrContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOAD() { return GetToken(EduLangParser.KW_LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EduLangParser.IDENTIFIER, 0); }
		public Load_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterLoad_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitLoad_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoad_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Load_instrContext load_instr() {
		Load_instrContext _localctx = new Load_instrContext(Context, State);
		EnterRule(_localctx, 10, RULE_load_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(KW_LOAD);
			State = 56;
			_localctx.id = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Store_instrContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STORE() { return GetToken(EduLangParser.KW_STORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EduLangParser.IDENTIFIER, 0); }
		public Store_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_store_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterStore_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitStore_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStore_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Store_instrContext store_instr() {
		Store_instrContext _localctx = new Store_instrContext(Context, State);
		EnterRule(_localctx, 12, RULE_store_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			Match(KW_STORE);
			State = 59;
			_localctx.id = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ADD() { return GetToken(EduLangParser.KW_ADD, 0); }
		public Add_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterAdd_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitAdd_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_instrContext add_instr() {
		Add_instrContext _localctx = new Add_instrContext(Context, State);
		EnterRule(_localctx, 14, RULE_add_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(KW_ADD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sub_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUB() { return GetToken(EduLangParser.KW_SUB, 0); }
		public Sub_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterSub_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitSub_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sub_instrContext sub_instr() {
		Sub_instrContext _localctx = new Sub_instrContext(Context, State);
		EnterRule(_localctx, 16, RULE_sub_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(KW_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_instrContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LABEL() { return GetToken(EduLangParser.KW_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EduLangParser.IDENTIFIER, 0); }
		public Label_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterLabel_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitLabel_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_instrContext label_instr() {
		Label_instrContext _localctx = new Label_instrContext(Context, State);
		EnterRule(_localctx, 18, RULE_label_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(KW_LABEL);
			State = 66;
			_localctx.id = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jumpz_instrContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_JUMPZ() { return GetToken(EduLangParser.KW_JUMPZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EduLangParser.IDENTIFIER, 0); }
		public Jumpz_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpz_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterJumpz_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitJumpz_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpz_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jumpz_instrContext jumpz_instr() {
		Jumpz_instrContext _localctx = new Jumpz_instrContext(Context, State);
		EnterRule(_localctx, 20, RULE_jumpz_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(KW_JUMPZ);
			State = 69;
			_localctx.id = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PRINT() { return GetToken(EduLangParser.KW_PRINT, 0); }
		public Print_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterPrint_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitPrint_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_instrContext print_instr() {
		Print_instrContext _localctx = new Print_instrContext(Context, State);
		EnterRule(_localctx, 22, RULE_print_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(KW_PRINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Halt_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_HALT() { return GetToken(EduLangParser.KW_HALT, 0); }
		public Halt_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_halt_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterHalt_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitHalt_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHalt_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Halt_instrContext halt_instr() {
		Halt_instrContext _localctx = new Halt_instrContext(Context, State);
		EnterRule(_localctx, 24, RULE_halt_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(KW_HALT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,15,76,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,5,0,29,8,0,10,
		0,12,0,32,9,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,3,2,49,8,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,
		1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,0,0,13,0,2,4,6,
		8,10,12,14,16,18,20,22,24,0,0,73,0,30,1,0,0,0,2,35,1,0,0,0,4,48,1,0,0,
		0,6,50,1,0,0,0,8,53,1,0,0,0,10,55,1,0,0,0,12,58,1,0,0,0,14,61,1,0,0,0,
		16,63,1,0,0,0,18,65,1,0,0,0,20,68,1,0,0,0,22,71,1,0,0,0,24,73,1,0,0,0,
		26,29,3,2,1,0,27,29,5,15,0,0,28,26,1,0,0,0,28,27,1,0,0,0,29,32,1,0,0,0,
		30,28,1,0,0,0,30,31,1,0,0,0,31,33,1,0,0,0,32,30,1,0,0,0,33,34,5,0,0,1,
		34,1,1,0,0,0,35,36,3,4,2,0,36,37,5,15,0,0,37,3,1,0,0,0,38,49,3,10,5,0,
		39,49,3,8,4,0,40,49,3,6,3,0,41,49,3,12,6,0,42,49,3,14,7,0,43,49,3,16,8,
		0,44,49,3,20,10,0,45,49,3,22,11,0,46,49,3,24,12,0,47,49,3,18,9,0,48,38,
		1,0,0,0,48,39,1,0,0,0,48,40,1,0,0,0,48,41,1,0,0,0,48,42,1,0,0,0,48,43,
		1,0,0,0,48,44,1,0,0,0,48,45,1,0,0,0,48,46,1,0,0,0,48,47,1,0,0,0,49,5,1,
		0,0,0,50,51,5,1,0,0,51,52,5,11,0,0,52,7,1,0,0,0,53,54,5,2,0,0,54,9,1,0,
		0,0,55,56,5,3,0,0,56,57,5,12,0,0,57,11,1,0,0,0,58,59,5,4,0,0,59,60,5,12,
		0,0,60,13,1,0,0,0,61,62,5,5,0,0,62,15,1,0,0,0,63,64,5,6,0,0,64,17,1,0,
		0,0,65,66,5,7,0,0,66,67,5,12,0,0,67,19,1,0,0,0,68,69,5,8,0,0,69,70,5,12,
		0,0,70,21,1,0,0,0,71,72,5,9,0,0,72,23,1,0,0,0,73,74,5,10,0,0,74,25,1,0,
		0,0,3,28,30,48
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
