//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/olson.stu/RiderProjects/FirstLanguage/FirstLanguage/grammar/EduLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class EduLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KW_PUSH=1, KW_POP=2, KW_LOAD=3, KW_STORE=4, KW_ADD=5, KW_SUB=6, KW_GT=7, 
		KW_LABEL=8, KW_JUMPZ=9, KW_PRINT=10, KW_INPUT=11, KW_HALT=12, KW_MACRO=13, 
		KW_BLOCK_END=14, KW_UNSAFE=15, INTEGER_LITERAL=16, IDENTIFIER=17, COMMENT=18, 
		WS=19, NEWLINE=20;
	public const int
		RULE_program = 0, RULE_low_statement = 1, RULE_macro_def = 2, RULE_macro_call = 3, 
		RULE_unsafe_block = 4, RULE_instruction = 5, RULE_push_instr = 6, RULE_pop_instr = 7, 
		RULE_load_instr = 8, RULE_store_instr = 9, RULE_add_instr = 10, RULE_sub_instr = 11, 
		RULE_gt_instr = 12, RULE_label_instr = 13, RULE_jumpz_instr = 14, RULE_print_instr = 15, 
		RULE_input_instr = 16, RULE_halt_instr = 17, RULE_unsafe_instr = 18, RULE_macro_instr = 19, 
		RULE_block_end_instr = 20;
	public static readonly string[] ruleNames = {
		"program", "low_statement", "macro_def", "macro_call", "unsafe_block", 
		"instruction", "push_instr", "pop_instr", "load_instr", "store_instr", 
		"add_instr", "sub_instr", "gt_instr", "label_instr", "jumpz_instr", "print_instr", 
		"input_instr", "halt_instr", "unsafe_instr", "macro_instr", "block_end_instr"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "KW_PUSH", "KW_POP", "KW_LOAD", "KW_STORE", "KW_ADD", "KW_SUB", 
		"KW_GT", "KW_LABEL", "KW_JUMPZ", "KW_PRINT", "KW_INPUT", "KW_HALT", "KW_MACRO", 
		"KW_BLOCK_END", "KW_UNSAFE", "INTEGER_LITERAL", "IDENTIFIER", "COMMENT", 
		"WS", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EduLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EduLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EduLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EduLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(EduLangParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unsafe_blockContext[] unsafe_block() {
			return GetRuleContexts<Unsafe_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unsafe_blockContext unsafe_block(int i) {
			return GetRuleContext<Unsafe_blockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(EduLangParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(EduLangParser.NEWLINE, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KW_UNSAFE || _la==NEWLINE) {
				{
				State = 44;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_UNSAFE:
					{
					State = 42;
					unsafe_block();
					}
					break;
				case NEWLINE:
					{
					State = 43;
					Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 49;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Low_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(EduLangParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_defContext macro_def() {
			return GetRuleContext<Macro_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_callContext macro_call() {
			return GetRuleContext<Macro_callContext>(0);
		}
		public Low_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_low_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterLow_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitLow_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLow_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Low_statementContext low_statement() {
		Low_statementContext _localctx = new Low_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_low_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_PUSH:
			case KW_POP:
			case KW_LOAD:
			case KW_STORE:
			case KW_ADD:
			case KW_SUB:
			case KW_GT:
			case KW_LABEL:
			case KW_JUMPZ:
			case KW_PRINT:
			case KW_INPUT:
			case KW_HALT:
				{
				State = 51;
				instruction();
				}
				break;
			case KW_MACRO:
				{
				State = 52;
				macro_def();
				}
				break;
			case IDENTIFIER:
				{
				State = 53;
				macro_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 56;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_defContext : ParserRuleContext {
		public IToken name;
		public IToken _IDENTIFIER;
		public IList<IToken> _args = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public Macro_instrContext macro_instr() {
			return GetRuleContext<Macro_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(EduLangParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(EduLangParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_end_instrContext block_end_instr() {
			return GetRuleContext<Block_end_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EduLangParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EduLangParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Low_statementContext[] low_statement() {
			return GetRuleContexts<Low_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Low_statementContext low_statement(int i) {
			return GetRuleContext<Low_statementContext>(i);
		}
		public Macro_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterMacro_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitMacro_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Macro_defContext macro_def() {
		Macro_defContext _localctx = new Macro_defContext(Context, State);
		EnterRule(_localctx, 4, RULE_macro_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			macro_instr();
			State = 59;
			_localctx.name = Match(IDENTIFIER);
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 60;
				_localctx._IDENTIFIER = Match(IDENTIFIER);
				_localctx._args.Add(_localctx._IDENTIFIER);
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 66;
			Match(NEWLINE);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1196030L) != 0)) {
				{
				State = 69;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_PUSH:
				case KW_POP:
				case KW_LOAD:
				case KW_STORE:
				case KW_ADD:
				case KW_SUB:
				case KW_GT:
				case KW_LABEL:
				case KW_JUMPZ:
				case KW_PRINT:
				case KW_INPUT:
				case KW_HALT:
				case KW_MACRO:
				case IDENTIFIER:
					{
					State = 67;
					low_statement();
					}
					break;
				case NEWLINE:
					{
					State = 68;
					Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 74;
			block_end_instr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_callContext : ParserRuleContext {
		public IToken name;
		public IToken _IDENTIFIER;
		public IList<IToken> _args = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EduLangParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EduLangParser.IDENTIFIER, i);
		}
		public Macro_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterMacro_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitMacro_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Macro_callContext macro_call() {
		Macro_callContext _localctx = new Macro_callContext(Context, State);
		EnterRule(_localctx, 6, RULE_macro_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			_localctx.name = Match(IDENTIFIER);
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 77;
				_localctx._IDENTIFIER = Match(IDENTIFIER);
				_localctx._args.Add(_localctx._IDENTIFIER);
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unsafe_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unsafe_instrContext unsafe_instr() {
			return GetRuleContext<Unsafe_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(EduLangParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(EduLangParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_end_instrContext block_end_instr() {
			return GetRuleContext<Block_end_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Low_statementContext[] low_statement() {
			return GetRuleContexts<Low_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Low_statementContext low_statement(int i) {
			return GetRuleContext<Low_statementContext>(i);
		}
		public Unsafe_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsafe_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterUnsafe_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitUnsafe_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafe_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unsafe_blockContext unsafe_block() {
		Unsafe_blockContext _localctx = new Unsafe_blockContext(Context, State);
		EnterRule(_localctx, 8, RULE_unsafe_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			unsafe_instr();
			State = 84;
			Match(NEWLINE);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1196030L) != 0)) {
				{
				State = 87;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_PUSH:
				case KW_POP:
				case KW_LOAD:
				case KW_STORE:
				case KW_ADD:
				case KW_SUB:
				case KW_GT:
				case KW_LABEL:
				case KW_JUMPZ:
				case KW_PRINT:
				case KW_INPUT:
				case KW_HALT:
				case KW_MACRO:
				case IDENTIFIER:
					{
					State = 85;
					low_statement();
					}
					break;
				case NEWLINE:
					{
					State = 86;
					Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 92;
			block_end_instr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Load_instrContext load_instr() {
			return GetRuleContext<Load_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pop_instrContext pop_instr() {
			return GetRuleContext<Pop_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Push_instrContext push_instr() {
			return GetRuleContext<Push_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Store_instrContext store_instr() {
			return GetRuleContext<Store_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_instrContext add_instr() {
			return GetRuleContext<Add_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_instrContext sub_instr() {
			return GetRuleContext<Sub_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gt_instrContext gt_instr() {
			return GetRuleContext<Gt_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jumpz_instrContext jumpz_instr() {
			return GetRuleContext<Jumpz_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Print_instrContext print_instr() {
			return GetRuleContext<Print_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Input_instrContext input_instr() {
			return GetRuleContext<Input_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Halt_instrContext halt_instr() {
			return GetRuleContext<Halt_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_instrContext label_instr() {
			return GetRuleContext<Label_instrContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 10, RULE_instruction);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_LOAD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				load_instr();
				}
				break;
			case KW_POP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95;
				pop_instr();
				}
				break;
			case KW_PUSH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 96;
				push_instr();
				}
				break;
			case KW_STORE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 97;
				store_instr();
				}
				break;
			case KW_ADD:
				EnterOuterAlt(_localctx, 5);
				{
				State = 98;
				add_instr();
				}
				break;
			case KW_SUB:
				EnterOuterAlt(_localctx, 6);
				{
				State = 99;
				sub_instr();
				}
				break;
			case KW_GT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 100;
				gt_instr();
				}
				break;
			case KW_JUMPZ:
				EnterOuterAlt(_localctx, 8);
				{
				State = 101;
				jumpz_instr();
				}
				break;
			case KW_PRINT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 102;
				print_instr();
				}
				break;
			case KW_INPUT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 103;
				input_instr();
				}
				break;
			case KW_HALT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 104;
				halt_instr();
				}
				break;
			case KW_LABEL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 105;
				label_instr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Push_instrContext : ParserRuleContext {
		public IToken val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PUSH() { return GetToken(EduLangParser.KW_PUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(EduLangParser.INTEGER_LITERAL, 0); }
		public Push_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_push_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterPush_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitPush_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPush_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Push_instrContext push_instr() {
		Push_instrContext _localctx = new Push_instrContext(Context, State);
		EnterRule(_localctx, 12, RULE_push_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(KW_PUSH);
			State = 109;
			_localctx.val = Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pop_instrContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_POP() { return GetToken(EduLangParser.KW_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EduLangParser.IDENTIFIER, 0); }
		public Pop_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pop_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterPop_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitPop_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPop_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pop_instrContext pop_instr() {
		Pop_instrContext _localctx = new Pop_instrContext(Context, State);
		EnterRule(_localctx, 14, RULE_pop_instr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(KW_POP);
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 112;
				_localctx.id = Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Load_instrContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOAD() { return GetToken(EduLangParser.KW_LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EduLangParser.IDENTIFIER, 0); }
		public Load_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterLoad_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitLoad_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoad_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Load_instrContext load_instr() {
		Load_instrContext _localctx = new Load_instrContext(Context, State);
		EnterRule(_localctx, 16, RULE_load_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(KW_LOAD);
			State = 116;
			_localctx.id = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Store_instrContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STORE() { return GetToken(EduLangParser.KW_STORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EduLangParser.IDENTIFIER, 0); }
		public Store_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_store_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterStore_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitStore_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStore_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Store_instrContext store_instr() {
		Store_instrContext _localctx = new Store_instrContext(Context, State);
		EnterRule(_localctx, 18, RULE_store_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(KW_STORE);
			State = 119;
			_localctx.id = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ADD() { return GetToken(EduLangParser.KW_ADD, 0); }
		public Add_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterAdd_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitAdd_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_instrContext add_instr() {
		Add_instrContext _localctx = new Add_instrContext(Context, State);
		EnterRule(_localctx, 20, RULE_add_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(KW_ADD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sub_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUB() { return GetToken(EduLangParser.KW_SUB, 0); }
		public Sub_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterSub_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitSub_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sub_instrContext sub_instr() {
		Sub_instrContext _localctx = new Sub_instrContext(Context, State);
		EnterRule(_localctx, 22, RULE_sub_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(KW_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gt_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GT() { return GetToken(EduLangParser.KW_GT, 0); }
		public Gt_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gt_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterGt_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitGt_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGt_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Gt_instrContext gt_instr() {
		Gt_instrContext _localctx = new Gt_instrContext(Context, State);
		EnterRule(_localctx, 24, RULE_gt_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(KW_GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_instrContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LABEL() { return GetToken(EduLangParser.KW_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EduLangParser.IDENTIFIER, 0); }
		public Label_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterLabel_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitLabel_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_instrContext label_instr() {
		Label_instrContext _localctx = new Label_instrContext(Context, State);
		EnterRule(_localctx, 26, RULE_label_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(KW_LABEL);
			State = 128;
			_localctx.id = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jumpz_instrContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_JUMPZ() { return GetToken(EduLangParser.KW_JUMPZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EduLangParser.IDENTIFIER, 0); }
		public Jumpz_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpz_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterJumpz_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitJumpz_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpz_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jumpz_instrContext jumpz_instr() {
		Jumpz_instrContext _localctx = new Jumpz_instrContext(Context, State);
		EnterRule(_localctx, 28, RULE_jumpz_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(KW_JUMPZ);
			State = 131;
			_localctx.id = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PRINT() { return GetToken(EduLangParser.KW_PRINT, 0); }
		public Print_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterPrint_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitPrint_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_instrContext print_instr() {
		Print_instrContext _localctx = new Print_instrContext(Context, State);
		EnterRule(_localctx, 30, RULE_print_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(KW_PRINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INPUT() { return GetToken(EduLangParser.KW_INPUT, 0); }
		public Input_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterInput_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitInput_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Input_instrContext input_instr() {
		Input_instrContext _localctx = new Input_instrContext(Context, State);
		EnterRule(_localctx, 32, RULE_input_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(KW_INPUT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Halt_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_HALT() { return GetToken(EduLangParser.KW_HALT, 0); }
		public Halt_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_halt_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterHalt_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitHalt_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHalt_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Halt_instrContext halt_instr() {
		Halt_instrContext _localctx = new Halt_instrContext(Context, State);
		EnterRule(_localctx, 34, RULE_halt_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(KW_HALT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unsafe_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSAFE() { return GetToken(EduLangParser.KW_UNSAFE, 0); }
		public Unsafe_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsafe_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterUnsafe_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitUnsafe_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafe_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unsafe_instrContext unsafe_instr() {
		Unsafe_instrContext _localctx = new Unsafe_instrContext(Context, State);
		EnterRule(_localctx, 36, RULE_unsafe_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(KW_UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MACRO() { return GetToken(EduLangParser.KW_MACRO, 0); }
		public Macro_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterMacro_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitMacro_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Macro_instrContext macro_instr() {
		Macro_instrContext _localctx = new Macro_instrContext(Context, State);
		EnterRule(_localctx, 38, RULE_macro_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(KW_MACRO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_end_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BLOCK_END() { return GetToken(EduLangParser.KW_BLOCK_END, 0); }
		public Block_end_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_end_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterBlock_end_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitBlock_end_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_end_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_end_instrContext block_end_instr() {
		Block_end_instrContext _localctx = new Block_end_instrContext(Context, State);
		EnterRule(_localctx, 40, RULE_block_end_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(KW_BLOCK_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,20,146,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,0,5,
		0,45,8,0,10,0,12,0,48,9,0,1,0,1,0,1,1,1,1,1,1,3,1,55,8,1,1,1,1,1,1,2,1,
		2,1,2,5,2,62,8,2,10,2,12,2,65,9,2,1,2,1,2,1,2,5,2,70,8,2,10,2,12,2,73,
		9,2,1,2,1,2,1,3,1,3,5,3,79,8,3,10,3,12,3,82,9,3,1,4,1,4,1,4,1,4,5,4,88,
		8,4,10,4,12,4,91,9,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,3,5,107,8,5,1,6,1,6,1,6,1,7,1,7,3,7,114,8,7,1,8,1,8,1,8,1,9,1,9,
		1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,
		15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,0,0,21,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,0,0,146,0,46,1,0,0,
		0,2,54,1,0,0,0,4,58,1,0,0,0,6,76,1,0,0,0,8,83,1,0,0,0,10,106,1,0,0,0,12,
		108,1,0,0,0,14,111,1,0,0,0,16,115,1,0,0,0,18,118,1,0,0,0,20,121,1,0,0,
		0,22,123,1,0,0,0,24,125,1,0,0,0,26,127,1,0,0,0,28,130,1,0,0,0,30,133,1,
		0,0,0,32,135,1,0,0,0,34,137,1,0,0,0,36,139,1,0,0,0,38,141,1,0,0,0,40,143,
		1,0,0,0,42,45,3,8,4,0,43,45,5,20,0,0,44,42,1,0,0,0,44,43,1,0,0,0,45,48,
		1,0,0,0,46,44,1,0,0,0,46,47,1,0,0,0,47,49,1,0,0,0,48,46,1,0,0,0,49,50,
		5,0,0,1,50,1,1,0,0,0,51,55,3,10,5,0,52,55,3,4,2,0,53,55,3,6,3,0,54,51,
		1,0,0,0,54,52,1,0,0,0,54,53,1,0,0,0,55,56,1,0,0,0,56,57,5,20,0,0,57,3,
		1,0,0,0,58,59,3,38,19,0,59,63,5,17,0,0,60,62,5,17,0,0,61,60,1,0,0,0,62,
		65,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,66,1,0,0,0,65,63,1,0,0,0,66,
		71,5,20,0,0,67,70,3,2,1,0,68,70,5,20,0,0,69,67,1,0,0,0,69,68,1,0,0,0,70,
		73,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,74,1,0,0,0,73,71,1,0,0,0,74,
		75,3,40,20,0,75,5,1,0,0,0,76,80,5,17,0,0,77,79,5,17,0,0,78,77,1,0,0,0,
		79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,7,1,0,0,0,82,80,1,0,0,0,83,
		84,3,36,18,0,84,89,5,20,0,0,85,88,3,2,1,0,86,88,5,20,0,0,87,85,1,0,0,0,
		87,86,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,92,1,0,0,0,
		91,89,1,0,0,0,92,93,3,40,20,0,93,9,1,0,0,0,94,107,3,16,8,0,95,107,3,14,
		7,0,96,107,3,12,6,0,97,107,3,18,9,0,98,107,3,20,10,0,99,107,3,22,11,0,
		100,107,3,24,12,0,101,107,3,28,14,0,102,107,3,30,15,0,103,107,3,32,16,
		0,104,107,3,34,17,0,105,107,3,26,13,0,106,94,1,0,0,0,106,95,1,0,0,0,106,
		96,1,0,0,0,106,97,1,0,0,0,106,98,1,0,0,0,106,99,1,0,0,0,106,100,1,0,0,
		0,106,101,1,0,0,0,106,102,1,0,0,0,106,103,1,0,0,0,106,104,1,0,0,0,106,
		105,1,0,0,0,107,11,1,0,0,0,108,109,5,1,0,0,109,110,5,16,0,0,110,13,1,0,
		0,0,111,113,5,2,0,0,112,114,5,17,0,0,113,112,1,0,0,0,113,114,1,0,0,0,114,
		15,1,0,0,0,115,116,5,3,0,0,116,117,5,17,0,0,117,17,1,0,0,0,118,119,5,4,
		0,0,119,120,5,17,0,0,120,19,1,0,0,0,121,122,5,5,0,0,122,21,1,0,0,0,123,
		124,5,6,0,0,124,23,1,0,0,0,125,126,5,7,0,0,126,25,1,0,0,0,127,128,5,8,
		0,0,128,129,5,17,0,0,129,27,1,0,0,0,130,131,5,9,0,0,131,132,5,17,0,0,132,
		29,1,0,0,0,133,134,5,10,0,0,134,31,1,0,0,0,135,136,5,11,0,0,136,33,1,0,
		0,0,137,138,5,12,0,0,138,35,1,0,0,0,139,140,5,15,0,0,140,37,1,0,0,0,141,
		142,5,13,0,0,142,39,1,0,0,0,143,144,5,14,0,0,144,41,1,0,0,0,11,44,46,54,
		63,69,71,80,87,89,106,113
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
