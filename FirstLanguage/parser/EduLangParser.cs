//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/Lukas/Projects/FirstLanguage/FirstLanguage/grammar/EduLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class EduLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KW_PUSH=1, KW_POP=2, KW_LOAD=3, KW_STORE=4, KW_ADD=5, KW_SUB=6, KW_LABEL=7, 
		KW_JUMPZ=8, KW_PRINT=9, KW_INPUT=10, KW_HALT=11, KW_MACRO=12, KW_BLOCK_END=13, 
		INTEGER_LITERAL=14, IDENTIFIER=15, COMMENT=16, WS=17, NEWLINE=18;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_macro_def = 2, RULE_macro_call = 3, 
		RULE_instruction = 4, RULE_push_instr = 5, RULE_pop_instr = 6, RULE_load_instr = 7, 
		RULE_store_instr = 8, RULE_add_instr = 9, RULE_sub_instr = 10, RULE_label_instr = 11, 
		RULE_jumpz_instr = 12, RULE_print_instr = 13, RULE_input_instr = 14, RULE_halt_instr = 15, 
		RULE_macro_instr = 16, RULE_block_end_instr = 17;
	public static readonly string[] ruleNames = {
		"program", "statement", "macro_def", "macro_call", "instruction", "push_instr", 
		"pop_instr", "load_instr", "store_instr", "add_instr", "sub_instr", "label_instr", 
		"jumpz_instr", "print_instr", "input_instr", "halt_instr", "macro_instr", 
		"block_end_instr"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "KW_PUSH", "KW_POP", "KW_LOAD", "KW_STORE", "KW_ADD", "KW_SUB", 
		"KW_LABEL", "KW_JUMPZ", "KW_PRINT", "KW_INPUT", "KW_HALT", "KW_MACRO", 
		"KW_BLOCK_END", "INTEGER_LITERAL", "IDENTIFIER", "COMMENT", "WS", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EduLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EduLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EduLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EduLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(EduLangParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(EduLangParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(EduLangParser.NEWLINE, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 303102L) != 0)) {
				{
				State = 38;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_PUSH:
				case KW_POP:
				case KW_LOAD:
				case KW_STORE:
				case KW_ADD:
				case KW_SUB:
				case KW_LABEL:
				case KW_JUMPZ:
				case KW_PRINT:
				case KW_INPUT:
				case KW_HALT:
				case KW_MACRO:
				case IDENTIFIER:
					{
					State = 36;
					statement();
					}
					break;
				case NEWLINE:
					{
					State = 37;
					Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 43;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(EduLangParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_defContext macro_def() {
			return GetRuleContext<Macro_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_callContext macro_call() {
			return GetRuleContext<Macro_callContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_PUSH:
			case KW_POP:
			case KW_LOAD:
			case KW_STORE:
			case KW_ADD:
			case KW_SUB:
			case KW_LABEL:
			case KW_JUMPZ:
			case KW_PRINT:
			case KW_INPUT:
			case KW_HALT:
				{
				State = 45;
				instruction();
				}
				break;
			case KW_MACRO:
				{
				State = 46;
				macro_def();
				}
				break;
			case IDENTIFIER:
				{
				State = 47;
				macro_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 50;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_defContext : ParserRuleContext {
		public IToken name;
		public IToken _IDENTIFIER;
		public IList<IToken> _args = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public Macro_instrContext macro_instr() {
			return GetRuleContext<Macro_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(EduLangParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(EduLangParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_end_instrContext block_end_instr() {
			return GetRuleContext<Block_end_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EduLangParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EduLangParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Macro_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterMacro_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitMacro_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Macro_defContext macro_def() {
		Macro_defContext _localctx = new Macro_defContext(Context, State);
		EnterRule(_localctx, 4, RULE_macro_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			macro_instr();
			State = 53;
			_localctx.name = Match(IDENTIFIER);
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 54;
				_localctx._IDENTIFIER = Match(IDENTIFIER);
				_localctx._args.Add(_localctx._IDENTIFIER);
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 60;
			Match(NEWLINE);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 303102L) != 0)) {
				{
				State = 63;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_PUSH:
				case KW_POP:
				case KW_LOAD:
				case KW_STORE:
				case KW_ADD:
				case KW_SUB:
				case KW_LABEL:
				case KW_JUMPZ:
				case KW_PRINT:
				case KW_INPUT:
				case KW_HALT:
				case KW_MACRO:
				case IDENTIFIER:
					{
					State = 61;
					statement();
					}
					break;
				case NEWLINE:
					{
					State = 62;
					Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 68;
			block_end_instr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_callContext : ParserRuleContext {
		public IToken name;
		public IToken _IDENTIFIER;
		public IList<IToken> _args = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EduLangParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EduLangParser.IDENTIFIER, i);
		}
		public Macro_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterMacro_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitMacro_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Macro_callContext macro_call() {
		Macro_callContext _localctx = new Macro_callContext(Context, State);
		EnterRule(_localctx, 6, RULE_macro_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			_localctx.name = Match(IDENTIFIER);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 71;
				_localctx._IDENTIFIER = Match(IDENTIFIER);
				_localctx._args.Add(_localctx._IDENTIFIER);
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Load_instrContext load_instr() {
			return GetRuleContext<Load_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pop_instrContext pop_instr() {
			return GetRuleContext<Pop_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Push_instrContext push_instr() {
			return GetRuleContext<Push_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Store_instrContext store_instr() {
			return GetRuleContext<Store_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_instrContext add_instr() {
			return GetRuleContext<Add_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_instrContext sub_instr() {
			return GetRuleContext<Sub_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jumpz_instrContext jumpz_instr() {
			return GetRuleContext<Jumpz_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Print_instrContext print_instr() {
			return GetRuleContext<Print_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Input_instrContext input_instr() {
			return GetRuleContext<Input_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Halt_instrContext halt_instr() {
			return GetRuleContext<Halt_instrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_instrContext label_instr() {
			return GetRuleContext<Label_instrContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 8, RULE_instruction);
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_LOAD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77;
				load_instr();
				}
				break;
			case KW_POP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				pop_instr();
				}
				break;
			case KW_PUSH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 79;
				push_instr();
				}
				break;
			case KW_STORE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 80;
				store_instr();
				}
				break;
			case KW_ADD:
				EnterOuterAlt(_localctx, 5);
				{
				State = 81;
				add_instr();
				}
				break;
			case KW_SUB:
				EnterOuterAlt(_localctx, 6);
				{
				State = 82;
				sub_instr();
				}
				break;
			case KW_JUMPZ:
				EnterOuterAlt(_localctx, 7);
				{
				State = 83;
				jumpz_instr();
				}
				break;
			case KW_PRINT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 84;
				print_instr();
				}
				break;
			case KW_INPUT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 85;
				input_instr();
				}
				break;
			case KW_HALT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 86;
				halt_instr();
				}
				break;
			case KW_LABEL:
				EnterOuterAlt(_localctx, 11);
				{
				State = 87;
				label_instr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Push_instrContext : ParserRuleContext {
		public IToken val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PUSH() { return GetToken(EduLangParser.KW_PUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(EduLangParser.INTEGER_LITERAL, 0); }
		public Push_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_push_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterPush_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitPush_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPush_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Push_instrContext push_instr() {
		Push_instrContext _localctx = new Push_instrContext(Context, State);
		EnterRule(_localctx, 10, RULE_push_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(KW_PUSH);
			State = 91;
			_localctx.val = Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pop_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_POP() { return GetToken(EduLangParser.KW_POP, 0); }
		public Pop_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pop_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterPop_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitPop_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPop_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pop_instrContext pop_instr() {
		Pop_instrContext _localctx = new Pop_instrContext(Context, State);
		EnterRule(_localctx, 12, RULE_pop_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(KW_POP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Load_instrContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOAD() { return GetToken(EduLangParser.KW_LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EduLangParser.IDENTIFIER, 0); }
		public Load_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterLoad_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitLoad_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoad_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Load_instrContext load_instr() {
		Load_instrContext _localctx = new Load_instrContext(Context, State);
		EnterRule(_localctx, 14, RULE_load_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(KW_LOAD);
			State = 96;
			_localctx.id = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Store_instrContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STORE() { return GetToken(EduLangParser.KW_STORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EduLangParser.IDENTIFIER, 0); }
		public Store_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_store_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterStore_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitStore_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStore_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Store_instrContext store_instr() {
		Store_instrContext _localctx = new Store_instrContext(Context, State);
		EnterRule(_localctx, 16, RULE_store_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(KW_STORE);
			State = 99;
			_localctx.id = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ADD() { return GetToken(EduLangParser.KW_ADD, 0); }
		public Add_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterAdd_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitAdd_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_instrContext add_instr() {
		Add_instrContext _localctx = new Add_instrContext(Context, State);
		EnterRule(_localctx, 18, RULE_add_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(KW_ADD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sub_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUB() { return GetToken(EduLangParser.KW_SUB, 0); }
		public Sub_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterSub_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitSub_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sub_instrContext sub_instr() {
		Sub_instrContext _localctx = new Sub_instrContext(Context, State);
		EnterRule(_localctx, 20, RULE_sub_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(KW_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_instrContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LABEL() { return GetToken(EduLangParser.KW_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EduLangParser.IDENTIFIER, 0); }
		public Label_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterLabel_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitLabel_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_instrContext label_instr() {
		Label_instrContext _localctx = new Label_instrContext(Context, State);
		EnterRule(_localctx, 22, RULE_label_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(KW_LABEL);
			State = 106;
			_localctx.id = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jumpz_instrContext : ParserRuleContext {
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_JUMPZ() { return GetToken(EduLangParser.KW_JUMPZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EduLangParser.IDENTIFIER, 0); }
		public Jumpz_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpz_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterJumpz_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitJumpz_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpz_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jumpz_instrContext jumpz_instr() {
		Jumpz_instrContext _localctx = new Jumpz_instrContext(Context, State);
		EnterRule(_localctx, 24, RULE_jumpz_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(KW_JUMPZ);
			State = 109;
			_localctx.id = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PRINT() { return GetToken(EduLangParser.KW_PRINT, 0); }
		public Print_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterPrint_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitPrint_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_instrContext print_instr() {
		Print_instrContext _localctx = new Print_instrContext(Context, State);
		EnterRule(_localctx, 26, RULE_print_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(KW_PRINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INPUT() { return GetToken(EduLangParser.KW_INPUT, 0); }
		public Input_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterInput_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitInput_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Input_instrContext input_instr() {
		Input_instrContext _localctx = new Input_instrContext(Context, State);
		EnterRule(_localctx, 28, RULE_input_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(KW_INPUT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Halt_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_HALT() { return GetToken(EduLangParser.KW_HALT, 0); }
		public Halt_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_halt_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterHalt_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitHalt_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHalt_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Halt_instrContext halt_instr() {
		Halt_instrContext _localctx = new Halt_instrContext(Context, State);
		EnterRule(_localctx, 30, RULE_halt_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(KW_HALT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MACRO() { return GetToken(EduLangParser.KW_MACRO, 0); }
		public Macro_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterMacro_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitMacro_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Macro_instrContext macro_instr() {
		Macro_instrContext _localctx = new Macro_instrContext(Context, State);
		EnterRule(_localctx, 32, RULE_macro_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(KW_MACRO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_end_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BLOCK_END() { return GetToken(EduLangParser.KW_BLOCK_END, 0); }
		public Block_end_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_end_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.EnterBlock_end_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEduLangListener typedListener = listener as IEduLangListener;
			if (typedListener != null) typedListener.ExitBlock_end_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEduLangVisitor<TResult> typedVisitor = visitor as IEduLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_end_instr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_end_instrContext block_end_instr() {
		Block_end_instrContext _localctx = new Block_end_instrContext(Context, State);
		EnterRule(_localctx, 34, RULE_block_end_instr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(KW_BLOCK_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,18,122,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,5,0,39,8,0,10,0,12,0,42,9,0,1,0,
		1,0,1,1,1,1,1,1,3,1,49,8,1,1,1,1,1,1,2,1,2,1,2,5,2,56,8,2,10,2,12,2,59,
		9,2,1,2,1,2,1,2,5,2,64,8,2,10,2,12,2,67,9,2,1,2,1,2,1,3,1,3,5,3,73,8,3,
		10,3,12,3,76,9,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,89,8,
		4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
		11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,
		17,1,17,0,0,18,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,0,0,121,
		0,40,1,0,0,0,2,48,1,0,0,0,4,52,1,0,0,0,6,70,1,0,0,0,8,88,1,0,0,0,10,90,
		1,0,0,0,12,93,1,0,0,0,14,95,1,0,0,0,16,98,1,0,0,0,18,101,1,0,0,0,20,103,
		1,0,0,0,22,105,1,0,0,0,24,108,1,0,0,0,26,111,1,0,0,0,28,113,1,0,0,0,30,
		115,1,0,0,0,32,117,1,0,0,0,34,119,1,0,0,0,36,39,3,2,1,0,37,39,5,18,0,0,
		38,36,1,0,0,0,38,37,1,0,0,0,39,42,1,0,0,0,40,38,1,0,0,0,40,41,1,0,0,0,
		41,43,1,0,0,0,42,40,1,0,0,0,43,44,5,0,0,1,44,1,1,0,0,0,45,49,3,8,4,0,46,
		49,3,4,2,0,47,49,3,6,3,0,48,45,1,0,0,0,48,46,1,0,0,0,48,47,1,0,0,0,49,
		50,1,0,0,0,50,51,5,18,0,0,51,3,1,0,0,0,52,53,3,32,16,0,53,57,5,15,0,0,
		54,56,5,15,0,0,55,54,1,0,0,0,56,59,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,
		58,60,1,0,0,0,59,57,1,0,0,0,60,65,5,18,0,0,61,64,3,2,1,0,62,64,5,18,0,
		0,63,61,1,0,0,0,63,62,1,0,0,0,64,67,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,
		0,66,68,1,0,0,0,67,65,1,0,0,0,68,69,3,34,17,0,69,5,1,0,0,0,70,74,5,15,
		0,0,71,73,5,15,0,0,72,71,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,74,75,1,0,
		0,0,75,7,1,0,0,0,76,74,1,0,0,0,77,89,3,14,7,0,78,89,3,12,6,0,79,89,3,10,
		5,0,80,89,3,16,8,0,81,89,3,18,9,0,82,89,3,20,10,0,83,89,3,24,12,0,84,89,
		3,26,13,0,85,89,3,28,14,0,86,89,3,30,15,0,87,89,3,22,11,0,88,77,1,0,0,
		0,88,78,1,0,0,0,88,79,1,0,0,0,88,80,1,0,0,0,88,81,1,0,0,0,88,82,1,0,0,
		0,88,83,1,0,0,0,88,84,1,0,0,0,88,85,1,0,0,0,88,86,1,0,0,0,88,87,1,0,0,
		0,89,9,1,0,0,0,90,91,5,1,0,0,91,92,5,14,0,0,92,11,1,0,0,0,93,94,5,2,0,
		0,94,13,1,0,0,0,95,96,5,3,0,0,96,97,5,15,0,0,97,15,1,0,0,0,98,99,5,4,0,
		0,99,100,5,15,0,0,100,17,1,0,0,0,101,102,5,5,0,0,102,19,1,0,0,0,103,104,
		5,6,0,0,104,21,1,0,0,0,105,106,5,7,0,0,106,107,5,15,0,0,107,23,1,0,0,0,
		108,109,5,8,0,0,109,110,5,15,0,0,110,25,1,0,0,0,111,112,5,9,0,0,112,27,
		1,0,0,0,113,114,5,10,0,0,114,29,1,0,0,0,115,116,5,11,0,0,116,31,1,0,0,
		0,117,118,5,12,0,0,118,33,1,0,0,0,119,120,5,13,0,0,120,35,1,0,0,0,8,38,
		40,48,57,63,65,74,88
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
