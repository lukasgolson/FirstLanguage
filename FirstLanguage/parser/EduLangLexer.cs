//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/olson.stu/RiderProjects/FirstLanguage/FirstLanguage/grammar/EduLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class EduLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KW_PUSH=1, KW_POP=2, KW_LOAD=3, KW_STORE=4, KW_ADD=5, KW_SUB=6, KW_GT=7, 
		KW_LABEL=8, KW_JUMPZ=9, KW_PRINT=10, KW_INPUT=11, KW_HALT=12, KW_MACRO=13, 
		KW_BLOCK_END=14, KW_UNSAFE=15, INTEGER_LITERAL=16, IDENTIFIER=17, COMMENT=18, 
		WS=19, NEWLINE=20;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", 
		"O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "COLON", "AT", 
		"KW_PUSH", "KW_POP", "KW_LOAD", "KW_STORE", "KW_ADD", "KW_SUB", "KW_GT", 
		"KW_LABEL", "KW_JUMPZ", "KW_PRINT", "KW_INPUT", "KW_HALT", "KW_MACRO", 
		"KW_BLOCK_END", "KW_UNSAFE", "INTEGER_LITERAL", "IDENTIFIER", "COMMENT", 
		"WS", "NEWLINE"
	};


	public EduLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public EduLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "KW_PUSH", "KW_POP", "KW_LOAD", "KW_STORE", "KW_ADD", "KW_SUB", 
		"KW_GT", "KW_LABEL", "KW_JUMPZ", "KW_PRINT", "KW_INPUT", "KW_HALT", "KW_MACRO", 
		"KW_BLOCK_END", "KW_UNSAFE", "INTEGER_LITERAL", "IDENTIFIER", "COMMENT", 
		"WS", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EduLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EduLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,20,269,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
		10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,
		17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
		24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,
		29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,
		32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,
		35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,
		38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,
		40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
		42,1,43,3,43,233,8,43,1,43,4,43,236,8,43,11,43,12,43,237,1,44,1,44,5,44,
		242,8,44,10,44,12,44,245,9,44,1,45,1,45,5,45,249,8,45,10,45,12,45,252,
		9,45,1,45,1,45,1,46,4,46,257,8,46,11,46,12,46,258,1,46,1,46,1,47,1,47,
		3,47,265,8,47,1,47,3,47,268,8,47,0,0,48,1,0,3,0,5,0,7,0,9,0,11,0,13,0,
		15,0,17,0,19,0,21,0,23,0,25,0,27,0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,
		43,0,45,0,47,0,49,0,51,0,53,0,55,0,57,1,59,2,61,3,63,4,65,5,67,6,69,7,
		71,8,73,9,75,10,77,11,79,12,81,13,83,14,85,15,87,16,89,17,91,18,93,19,
		95,20,1,0,33,2,0,65,65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,68,68,
		100,100,2,0,69,69,101,101,2,0,70,70,102,102,2,0,71,71,103,103,2,0,72,72,
		104,104,2,0,73,73,105,105,2,0,74,74,106,106,2,0,75,75,107,107,2,0,76,76,
		108,108,2,0,77,77,109,109,2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,
		112,112,2,0,81,81,113,113,2,0,82,82,114,114,2,0,83,83,115,115,2,0,84,84,
		116,116,2,0,85,85,117,117,2,0,86,86,118,118,2,0,87,87,119,119,2,0,88,88,
		120,120,2,0,89,89,121,121,2,0,90,90,122,122,1,0,58,58,1,0,64,64,1,0,48,
		57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,
		2,0,9,9,32,32,247,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
		0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
		1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
		0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,1,97,
		1,0,0,0,3,99,1,0,0,0,5,101,1,0,0,0,7,103,1,0,0,0,9,105,1,0,0,0,11,107,
		1,0,0,0,13,109,1,0,0,0,15,111,1,0,0,0,17,113,1,0,0,0,19,115,1,0,0,0,21,
		117,1,0,0,0,23,119,1,0,0,0,25,121,1,0,0,0,27,123,1,0,0,0,29,125,1,0,0,
		0,31,127,1,0,0,0,33,129,1,0,0,0,35,131,1,0,0,0,37,133,1,0,0,0,39,135,1,
		0,0,0,41,137,1,0,0,0,43,139,1,0,0,0,45,141,1,0,0,0,47,143,1,0,0,0,49,145,
		1,0,0,0,51,147,1,0,0,0,53,149,1,0,0,0,55,151,1,0,0,0,57,153,1,0,0,0,59,
		158,1,0,0,0,61,162,1,0,0,0,63,167,1,0,0,0,65,173,1,0,0,0,67,177,1,0,0,
		0,69,181,1,0,0,0,71,184,1,0,0,0,73,190,1,0,0,0,75,196,1,0,0,0,77,202,1,
		0,0,0,79,208,1,0,0,0,81,213,1,0,0,0,83,219,1,0,0,0,85,223,1,0,0,0,87,232,
		1,0,0,0,89,239,1,0,0,0,91,246,1,0,0,0,93,256,1,0,0,0,95,267,1,0,0,0,97,
		98,7,0,0,0,98,2,1,0,0,0,99,100,7,1,0,0,100,4,1,0,0,0,101,102,7,2,0,0,102,
		6,1,0,0,0,103,104,7,3,0,0,104,8,1,0,0,0,105,106,7,4,0,0,106,10,1,0,0,0,
		107,108,7,5,0,0,108,12,1,0,0,0,109,110,7,6,0,0,110,14,1,0,0,0,111,112,
		7,7,0,0,112,16,1,0,0,0,113,114,7,8,0,0,114,18,1,0,0,0,115,116,7,9,0,0,
		116,20,1,0,0,0,117,118,7,10,0,0,118,22,1,0,0,0,119,120,7,11,0,0,120,24,
		1,0,0,0,121,122,7,12,0,0,122,26,1,0,0,0,123,124,7,13,0,0,124,28,1,0,0,
		0,125,126,7,14,0,0,126,30,1,0,0,0,127,128,7,15,0,0,128,32,1,0,0,0,129,
		130,7,16,0,0,130,34,1,0,0,0,131,132,7,17,0,0,132,36,1,0,0,0,133,134,7,
		18,0,0,134,38,1,0,0,0,135,136,7,19,0,0,136,40,1,0,0,0,137,138,7,20,0,0,
		138,42,1,0,0,0,139,140,7,21,0,0,140,44,1,0,0,0,141,142,7,22,0,0,142,46,
		1,0,0,0,143,144,7,23,0,0,144,48,1,0,0,0,145,146,7,24,0,0,146,50,1,0,0,
		0,147,148,7,25,0,0,148,52,1,0,0,0,149,150,7,26,0,0,150,54,1,0,0,0,151,
		152,7,27,0,0,152,56,1,0,0,0,153,154,3,31,15,0,154,155,3,41,20,0,155,156,
		3,37,18,0,156,157,3,15,7,0,157,58,1,0,0,0,158,159,3,31,15,0,159,160,3,
		29,14,0,160,161,3,31,15,0,161,60,1,0,0,0,162,163,3,23,11,0,163,164,3,29,
		14,0,164,165,3,1,0,0,165,166,3,7,3,0,166,62,1,0,0,0,167,168,3,37,18,0,
		168,169,3,39,19,0,169,170,3,29,14,0,170,171,3,35,17,0,171,172,3,9,4,0,
		172,64,1,0,0,0,173,174,3,1,0,0,174,175,3,7,3,0,175,176,3,7,3,0,176,66,
		1,0,0,0,177,178,3,37,18,0,178,179,3,41,20,0,179,180,3,3,1,0,180,68,1,0,
		0,0,181,182,3,13,6,0,182,183,3,39,19,0,183,70,1,0,0,0,184,185,3,23,11,
		0,185,186,3,1,0,0,186,187,3,3,1,0,187,188,3,9,4,0,188,189,3,23,11,0,189,
		72,1,0,0,0,190,191,3,19,9,0,191,192,3,41,20,0,192,193,3,25,12,0,193,194,
		3,31,15,0,194,195,3,51,25,0,195,74,1,0,0,0,196,197,3,31,15,0,197,198,3,
		35,17,0,198,199,3,17,8,0,199,200,3,27,13,0,200,201,3,39,19,0,201,76,1,
		0,0,0,202,203,3,17,8,0,203,204,3,27,13,0,204,205,3,31,15,0,205,206,3,41,
		20,0,206,207,3,39,19,0,207,78,1,0,0,0,208,209,3,15,7,0,209,210,3,1,0,0,
		210,211,3,23,11,0,211,212,3,39,19,0,212,80,1,0,0,0,213,214,3,25,12,0,214,
		215,3,1,0,0,215,216,3,5,2,0,216,217,3,35,17,0,217,218,3,29,14,0,218,82,
		1,0,0,0,219,220,3,9,4,0,220,221,3,27,13,0,221,222,3,7,3,0,222,84,1,0,0,
		0,223,224,3,55,27,0,224,225,3,41,20,0,225,226,3,27,13,0,226,227,3,37,18,
		0,227,228,3,1,0,0,228,229,3,11,5,0,229,230,3,9,4,0,230,86,1,0,0,0,231,
		233,5,45,0,0,232,231,1,0,0,0,232,233,1,0,0,0,233,235,1,0,0,0,234,236,7,
		28,0,0,235,234,1,0,0,0,236,237,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,
		238,88,1,0,0,0,239,243,7,29,0,0,240,242,7,30,0,0,241,240,1,0,0,0,242,245,
		1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,90,1,0,0,0,245,243,1,0,0,0,
		246,250,5,35,0,0,247,249,8,31,0,0,248,247,1,0,0,0,249,252,1,0,0,0,250,
		248,1,0,0,0,250,251,1,0,0,0,251,253,1,0,0,0,252,250,1,0,0,0,253,254,6,
		45,0,0,254,92,1,0,0,0,255,257,7,32,0,0,256,255,1,0,0,0,257,258,1,0,0,0,
		258,256,1,0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,261,6,46,0,0,261,94,
		1,0,0,0,262,264,5,13,0,0,263,265,5,10,0,0,264,263,1,0,0,0,264,265,1,0,
		0,0,265,268,1,0,0,0,266,268,5,10,0,0,267,262,1,0,0,0,267,266,1,0,0,0,268,
		96,1,0,0,0,8,0,232,237,243,250,258,264,267,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
