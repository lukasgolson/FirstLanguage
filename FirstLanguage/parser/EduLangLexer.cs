//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/Lukas/Projects/FirstLanguage/FirstLanguage/grammar/EduLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class EduLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KW_PUSH=1, KW_POP=2, KW_LOAD=3, KW_STORE=4, KW_ADD=5, KW_SUB=6, KW_LABEL=7, 
		KW_JUMPZ=8, KW_PRINT=9, KW_HALT=10, KW_MACRO=11, KW_MACRO_END=12, INTEGER_LITERAL=13, 
		IDENTIFIER=14, COMMENT=15, WS=16, NEWLINE=17;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", 
		"O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "KW_PUSH", 
		"KW_POP", "KW_LOAD", "KW_STORE", "KW_ADD", "KW_SUB", "KW_LABEL", "KW_JUMPZ", 
		"KW_PRINT", "KW_HALT", "KW_MACRO", "KW_MACRO_END", "INTEGER_LITERAL", 
		"IDENTIFIER", "COMMENT", "WS", "NEWLINE"
	};


	public EduLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public EduLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "KW_PUSH", "KW_POP", "KW_LOAD", "KW_STORE", "KW_ADD", "KW_SUB", 
		"KW_LABEL", "KW_JUMPZ", "KW_PRINT", "KW_HALT", "KW_MACRO", "KW_MACRO_END", 
		"INTEGER_LITERAL", "IDENTIFIER", "COMMENT", "WS", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EduLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EduLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,17,238,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
		8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,
		15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,
		22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,
		27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,
		30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,
		33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,
		35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,3,38,202,
		8,38,1,38,4,38,205,8,38,11,38,12,38,206,1,39,1,39,5,39,211,8,39,10,39,
		12,39,214,9,39,1,40,1,40,5,40,218,8,40,10,40,12,40,221,9,40,1,40,1,40,
		1,41,4,41,226,8,41,11,41,12,41,227,1,41,1,41,1,42,1,42,3,42,234,8,42,1,
		42,3,42,237,8,42,0,0,43,1,0,3,0,5,0,7,0,9,0,11,0,13,0,15,0,17,0,19,0,21,
		0,23,0,25,0,27,0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,
		0,51,0,53,1,55,2,57,3,59,4,61,5,63,6,65,7,67,8,69,9,71,10,73,11,75,12,
		77,13,79,14,81,15,83,16,85,17,1,0,31,2,0,65,65,97,97,2,0,66,66,98,98,2,
		0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,2,
		0,71,71,103,103,2,0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,106,106,
		2,0,75,75,107,107,2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,110,
		2,0,79,79,111,111,2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,114,
		2,0,83,83,115,115,2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,118,
		2,0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,122,
		1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,
		13,13,2,0,9,9,32,32,218,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
		0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
		0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
		1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,87,1,0,0,0,3,89,1,0,0,0,5,91,1,0,0,
		0,7,93,1,0,0,0,9,95,1,0,0,0,11,97,1,0,0,0,13,99,1,0,0,0,15,101,1,0,0,0,
		17,103,1,0,0,0,19,105,1,0,0,0,21,107,1,0,0,0,23,109,1,0,0,0,25,111,1,0,
		0,0,27,113,1,0,0,0,29,115,1,0,0,0,31,117,1,0,0,0,33,119,1,0,0,0,35,121,
		1,0,0,0,37,123,1,0,0,0,39,125,1,0,0,0,41,127,1,0,0,0,43,129,1,0,0,0,45,
		131,1,0,0,0,47,133,1,0,0,0,49,135,1,0,0,0,51,137,1,0,0,0,53,139,1,0,0,
		0,55,144,1,0,0,0,57,148,1,0,0,0,59,153,1,0,0,0,61,159,1,0,0,0,63,163,1,
		0,0,0,65,167,1,0,0,0,67,173,1,0,0,0,69,179,1,0,0,0,71,185,1,0,0,0,73,190,
		1,0,0,0,75,196,1,0,0,0,77,201,1,0,0,0,79,208,1,0,0,0,81,215,1,0,0,0,83,
		225,1,0,0,0,85,236,1,0,0,0,87,88,7,0,0,0,88,2,1,0,0,0,89,90,7,1,0,0,90,
		4,1,0,0,0,91,92,7,2,0,0,92,6,1,0,0,0,93,94,7,3,0,0,94,8,1,0,0,0,95,96,
		7,4,0,0,96,10,1,0,0,0,97,98,7,5,0,0,98,12,1,0,0,0,99,100,7,6,0,0,100,14,
		1,0,0,0,101,102,7,7,0,0,102,16,1,0,0,0,103,104,7,8,0,0,104,18,1,0,0,0,
		105,106,7,9,0,0,106,20,1,0,0,0,107,108,7,10,0,0,108,22,1,0,0,0,109,110,
		7,11,0,0,110,24,1,0,0,0,111,112,7,12,0,0,112,26,1,0,0,0,113,114,7,13,0,
		0,114,28,1,0,0,0,115,116,7,14,0,0,116,30,1,0,0,0,117,118,7,15,0,0,118,
		32,1,0,0,0,119,120,7,16,0,0,120,34,1,0,0,0,121,122,7,17,0,0,122,36,1,0,
		0,0,123,124,7,18,0,0,124,38,1,0,0,0,125,126,7,19,0,0,126,40,1,0,0,0,127,
		128,7,20,0,0,128,42,1,0,0,0,129,130,7,21,0,0,130,44,1,0,0,0,131,132,7,
		22,0,0,132,46,1,0,0,0,133,134,7,23,0,0,134,48,1,0,0,0,135,136,7,24,0,0,
		136,50,1,0,0,0,137,138,7,25,0,0,138,52,1,0,0,0,139,140,3,31,15,0,140,141,
		3,41,20,0,141,142,3,37,18,0,142,143,3,15,7,0,143,54,1,0,0,0,144,145,3,
		31,15,0,145,146,3,29,14,0,146,147,3,31,15,0,147,56,1,0,0,0,148,149,3,23,
		11,0,149,150,3,29,14,0,150,151,3,1,0,0,151,152,3,7,3,0,152,58,1,0,0,0,
		153,154,3,37,18,0,154,155,3,39,19,0,155,156,3,29,14,0,156,157,3,35,17,
		0,157,158,3,9,4,0,158,60,1,0,0,0,159,160,3,1,0,0,160,161,3,7,3,0,161,162,
		3,7,3,0,162,62,1,0,0,0,163,164,3,37,18,0,164,165,3,41,20,0,165,166,3,3,
		1,0,166,64,1,0,0,0,167,168,3,23,11,0,168,169,3,1,0,0,169,170,3,3,1,0,170,
		171,3,9,4,0,171,172,3,23,11,0,172,66,1,0,0,0,173,174,3,19,9,0,174,175,
		3,41,20,0,175,176,3,25,12,0,176,177,3,31,15,0,177,178,3,51,25,0,178,68,
		1,0,0,0,179,180,3,31,15,0,180,181,3,35,17,0,181,182,3,17,8,0,182,183,3,
		27,13,0,183,184,3,39,19,0,184,70,1,0,0,0,185,186,3,15,7,0,186,187,3,1,
		0,0,187,188,3,23,11,0,188,189,3,39,19,0,189,72,1,0,0,0,190,191,3,25,12,
		0,191,192,3,1,0,0,192,193,3,5,2,0,193,194,3,35,17,0,194,195,3,29,14,0,
		195,74,1,0,0,0,196,197,3,9,4,0,197,198,3,27,13,0,198,199,3,7,3,0,199,76,
		1,0,0,0,200,202,5,45,0,0,201,200,1,0,0,0,201,202,1,0,0,0,202,204,1,0,0,
		0,203,205,7,26,0,0,204,203,1,0,0,0,205,206,1,0,0,0,206,204,1,0,0,0,206,
		207,1,0,0,0,207,78,1,0,0,0,208,212,7,27,0,0,209,211,7,28,0,0,210,209,1,
		0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,80,1,0,0,0,214,
		212,1,0,0,0,215,219,5,35,0,0,216,218,8,29,0,0,217,216,1,0,0,0,218,221,
		1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,219,1,0,0,
		0,222,223,6,40,0,0,223,82,1,0,0,0,224,226,7,30,0,0,225,224,1,0,0,0,226,
		227,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,229,1,0,0,0,229,230,6,
		41,0,0,230,84,1,0,0,0,231,233,5,13,0,0,232,234,5,10,0,0,233,232,1,0,0,
		0,233,234,1,0,0,0,234,237,1,0,0,0,235,237,5,10,0,0,236,231,1,0,0,0,236,
		235,1,0,0,0,237,86,1,0,0,0,8,0,201,206,212,219,227,233,236,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
